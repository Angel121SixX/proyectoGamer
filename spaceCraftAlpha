""" Importar la bilioteca de Pygame"""

import pygame

""" Una funcion la cual inicializara el videojuego """

def gameStart():

    """ Inicializamos la biblioteca de pygame """
    pygame.init()

    """ Definamos el tamaÃ±o de la Main Frame """

    w = pygame.display.set_mode((1280,720))

    """ Definamos el nombre de el videojuego
    (El nombre se visualizara en la parte superior de la pantalla)"""

    pygame.display.set_caption("RetroFighterX")

    """ Agregemos el fondo de pantalla """

    bg = pygame.image.load('8-bit-pixel-art-city-2o.jpg')

    """ Agregamos la imagen estatica de la nave #1 """

    clock = pygame.time.Clock()

    """ Agregamos la nave al juego como un rectangulo """

    naveStanding = [pygame.image.load('staticSpaceShip.png'), pygame.image.load('staticSpaceShip2.png')]

    """ Agregamos el movimiento de la nave hacia arriba y hacia abajo """

    naveArriba = [pygame.image.load('staticSpaceShip.png'), pygame.image.load('staticSpaceShip2.png')]

    naveAbajo = [pygame.image.load('staticSpaceShip.png'), pygame.image.load('staticSpaceShip2.png')]

    """ Agregamos la imagen estatica de la nave #2 """

    enemyStanding = [pygame.image.load('staticSpaceShipcopy.png'), pygame.image.load('staticSpaceShip2copy.png')]

    """ Agregamos el movimiento de la nave #2 hacia arriba y hacia abajo """

    enemyArriba = [pygame.image.load('staticSpaceShipcopy.png'), pygame.image.load('staticSpaceShip2copy.png')]

    enemyAbajo = [pygame.image.load('staticSpaceShipcopy.png'), pygame.image.load('staticSpaceShip2copy.png')]

    """ Agregamos el sprite de el objeto de la clase missile """

    piupiu = [pygame.image.load('LaserBall.png'), pygame.image.load('LaserBall2.png')]


    """ Clase que maneja el Jugador """
    class spaceShip(object):

        def __init__(self, x, y, width, height):
            self.x = x
            self.y = y
            self.width = width
            self.height = height
            self.vel = 5
            self.health = 10
            self.visible= True
            self.flyCount = 0
            self.alive = True
            self.standing = True
            # self.hitbox = (self.x, self.y, 340, 145)
            self.up = False
            self.down = False
            self.atack = False


        def draw(self, win):
            if self.alive == True:
                if self.flyCount + 1 >= 9:
                    self.flyCount = 0

            if not(self.standing):

                if self.up:
                    win.blit(naveArriba[(self.flyCount//3)%2], (self.x, self.y))
                    self.flyCount += 1

                elif self.down:
                    win.blit(naveAbajo[(self.flyCount//3)%2], (self.x, self.y))
                    self.flyCount += 1

            else:
                if self.standing:
                    win.blit(naveStanding[(self.flyCount//3)%2], (self.x, self.y))

            self.hitbox = (self.x + 45, self.y + 40, 280, 80)
            # pygame.draw.rect(win, (255, 0, 0), self.hitbox, 2)
            # pygame.draw.rect(win, (255, 0, 0), (5, 5, 200, 40))
            pygame.draw.rect(win, (0, 255, 0), (5, 5, 200 - ((200/10) * (10 - self.health)), 40))

        def colision(self):
            if self.health > 0:
                self.health -= 1
            else:
                self.alive = False
            pass

    class enemyShip(object):

        def __init__(self, x, y, width, height):
            self.x = x
            self.y = y
            self.width = width
            self.height = height
            self.vel = 5
            self.health = 10
            self.visible = True
            self.flyCount = 0
            self.alive = True
            self.standing = True
            # self.hitbox = (self.x, self.y, 340, 145)
            self.up = False
            self.down = False
            self.atack = False

        def draw(self, win):
            if self.alive == True:
                if self.flyCount + 1 >= 9:
                    self.flyCount = 0

            if not(self.standing):

                if self.up:
                    win.blit(enemyArriba[(self.flyCount//3)%2], (self.x, self.y))
                    self.flyCount += 1

                elif self.down:
                    win.blit(enemyAbajo[(self.flyCount//3)%2], (self.x, self.y))
                    self.flyCount += 1

            else:
                if self.standing:
                    win.blit(enemyStanding[(self.flyCount//3)%2], (self.x, self.y))

            self.hitbox = (self.x + 10, self.y + 40, 280, 80)
            # pygame.draw.rect(win, (255, 0, 0), self.hitbox, 2)
            # pygame.draw.rect(win, (255, 0, 0), (5, 5, 200, 40))
            pygame.draw.rect(win, (0, 255, 0), (1070, 5, 200 - ((200/10) * (10 - self.health)), 40))

        def colision(self):
            if self.health > 0:
                self.health -= 1
            else:
                self.alive = False
            pass


    class missile(object):

        def __init__(self, x, y, radius, color, facing):
            self.x = x
            self.y = y
            self.radius = radius
            self.color = color
            self.facing = facing
            self.vel = 30 * facing

        def draw(self, win):
            pygame.draw.circle(win, self.color, (self.x, self.y), self.radius)



    def redrawGameWindow():
        w.blit(bg, (0,0))
        nave.draw(w)
        enemy.draw(w)
        for m in ms:
            m.draw(w)
        pygame.display.update()


    nave = spaceShip(50, 400, 340, 145)
    enemy = enemyShip(900, 400, 340, 145)
    ms = []
    run = True
    while run:
        clock.tick(16.33)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False

        for m in ms:
            if m.y - m.radius < nave.hitbox[1] + nave.hitbox[3] and m.y + m.radius > nave.hitbox[1]:
                if m.x + m.radius > nave.hitbox[0] and m.x - m.radius < nave.hitbox[0] + nave.hitbox[2]:
                    nave.colision()
                    ms.pop(ms.index(m))

            if m.y - m.radius < enemy.hitbox[1] + enemy.hitbox[3] and m.y + m.radius > enemy.hitbox[1]:
                if m.x + m.radius > enemy.hitbox[0] and m.x - m.radius < enemy.hitbox[0] + enemy.hitbox[2]:
                    enemy.colision()
                    ms.pop(ms.index(m))

            if m.x < 1280 and m.x > 0:
                m.x += m.vel
            else:
                ms.pop(ms.index(m))

        """ Lector de teclas presionadas """

        keys = pygame.key.get_pressed()

        if keys[pygame.K_SPACE]:
            facing = 2
            if len(ms) < 5:
                ms.append(missile(round(nave.x + nave.width + 100 //2), round(nave.y + nave.height //2), 6, (0, 150, 150), facing))

        if keys[pygame.K_j]:
            facing = 2
            if len(ms) < 5:
                ms.append(missile(round(enemy.x + enemy.width - 700 //2), round(enemy.y + enemy.height //2), 6, (0, 150, 150), -facing))

        if keys[pygame.K_UP] and nave.y > nave.vel:
            nave.y -= nave.vel**2.5
            nave.down = True
            nave.up = False
            nave.standing = False

        if keys[pygame.K_DOWN] and nave.y < 900 - nave.width - nave.vel:
            nave.y += nave.vel**2.5
            nave.up = True
            nave.down = False
            nave.standing = False

        if keys[pygame.K_w] and enemy.y > enemy.vel:
            enemy.y -= enemy.vel**2.5
            enemy.down = True
            enemy.up = False
            enemy.standing = False

        if keys[pygame.K_s] and enemy.y < 900 - enemy.width - enemy.vel:
            enemy.y += enemy.vel**2.5
            enemy.up = True
            enemy.down = False
            enemy.standing = False

        redrawGameWindow()

    pygame.quit()


gameStart()
